ggsave(plot = g2, "_plots/layer2.png", width = 4, height = 3, type = "cairo-png", units = "in")
# plot shaded error bar
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
ggsave(plot = g3, "_plots/layer3.png", width = 4, height = 3, type = "cairo-png", units = "in")
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
L <- lm( height ~ weight, d) # estimate model by minimizing least squares errors
summary(L)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
print(g1)
g2 <- g1 + geom_abline(intercept = L$coefficients[[1]], slope = L$coefficients[[2]],
color = "red", size = 2, alpha=0.8)
print(g2)
x_range <- ggplot_build(g2)$panel$ranges[[1]]$x.range
y_range <- ggplot_build(g2)$panel$ranges[[1]]$y.range
y_bar_140 <- as.numeric(predict(L, data.frame(weight=40)))
g3 <- g2 + geom_segment(aes(x = 40, y = y_range[1], xend = 40, yend = y_bar_140), colour = "navyblue", size = 2, alpha=0.8)
g3 <- g3 + geom_segment(aes(x = x_range[1], y = y_bar_140, xend = 40, yend = y_bar_140), colour = "navyblue", size = 2, alpha=0.8)
print(g3)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
rstan:::rstudio_stanc("_scripts/regression_height_model.stan")
rstan:::rstudio_stanc("_scripts/regression_height_ppc_model.stan")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_reg)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_ppc_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
rstan:::rstudio_stanc("_scripts/regression_height_ppc_model.stan")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg_ppc <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
height_bar <- extract(fit_reg_ppc, pars = 'height_bar', permuted = TRUE)$height_bar
dim(height_bar) # 4000-by-352
length(d$weight)
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
# =============================================================================
#### make plots ####
# =============================================================================
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# density of a generated value
plot_dens_height_bar1 <- stan_plot(fit_reg_ppc, pars = 'height_bar[1]', show_density = T, fill_color='skyblue')
plot_dens_height_bar1 <- plot_dens_height_bar1 + ylab("dens(height_bar | x = 47.8)")
plot_dens_height_bar1
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
# add the regression line
parm <- get_posterior_mean(fit_reg_ppc, c('alpha','beta'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
print(g2)
# plot shaded error bar
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
L <- lm( height ~ weight, d) # estimate model by minimizing least squares errors
summary(L)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
# add the regression line
g2 <- g1 + geom_abline(intercept = L$coefficients[[1]], slope = L$coefficients[[2]],
color = "red", size = 2, alpha=0.8)
print(g2)
# =============================================================================
#### Running Stan ####
# =============================================================================
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_reg)
print(fit_reg)
summary(L)
print(fit_reg)
summary(L)
stan_plot(fit_reg, pars = 'beta', show_density=T)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
# =============================================================================
#### Running Stan ####
# =============================================================================
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_ppc_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg_ppc <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
height_bar <- extract(fit_reg_ppc, pars = 'height_bar', permuted = TRUE)$height_bar
dim(height_bar) # 4000-by-352
length(d$weight)
height_HDI <- apply(height_bar, 2, HDIofMCMC)
height_HDI
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# density of a generated value
plot_dens_height_bar1 <- stan_plot(fit_reg_ppc, pars = 'height_bar[1]', show_density = T, fill_color='skyblue')
plot_dens_height_bar1 <- plot_dens_height_bar1 + ylab("dens(height_bar | x = 47.8)")
plot_dens_height_bar1
plot_dens_height_bar1
plot_dens_height_bar1 + ylab("dens(height_bar | x = 47.8)")
plot_dens_height_bar1 + ylab("dens(height_bar | x = 47.8)")
plot_dens_height_bar1
plot_dens_height_bar1 <- stan_plot(fit_reg_ppc, pars = 'height_bar[1]', show_density = T, fill_color='skyblue')
plot_dens_height_bar1 <- plot_dens_height_bar1 + ylab("dens(height_bar | x = 47.8)")
plot_dens_height_bar1
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
parm <- get_posterior_mean(fit_reg_ppc, c('alpha','beta'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
View(d)
L <- lm( height ~ weight, d)
summary(L)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
str(d)
head(d)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
str(d)
head(d)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
str(d)
head(d)
# =============================================================================
#### basic GLM ####
# =============================================================================
L <- lm( height ~ weight, d) # estimate model by minimizing least squares errors
summary(L)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
library(rstan)
library(ggplot2)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
str(d)
head(d)
head(d, 10)
L <- lm( height ~ weight, d)
summary(L)
L
anova(L)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
g1 <- ggplot(d, aes(weight,height))
g1 <- ggplot(d, aes(weight,height))
g1
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1
class(g1)
class(myconfig)
g1 +5
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
g2 <- g1 + geom_abline(intercept = L$coefficients[[1]], slope = L$coefficients[[2]],
color = "red", size = 10, alpha=0.3)
print(g2)
library(rstan)
library(ggplot2)
load('_data/height.RData')
d <- Howell1
d <- d[ d$age >= 18 , ]
str(d)
head(d)
# =============================================================================
#### basic GLM ####
# =============================================================================
L <- lm( height ~ weight, d) # estimate model by minimizing least squares errors
summary(L)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
# add the regression line
g2 <- g1 + geom_abline(intercept = L$coefficients[[1]], slope = L$coefficients[[2]],
color = "red", size = 2, alpha=0.8)
print(g2)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
str(dataList)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight)
modelFile <- '_scripts/regression_height_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_reg)
stan_trace(fit_reg, pars = 'alpha', inc_warmup = F)
stan_dens(fit_reg, separate_chains = F, fill = 'skyblue')
fit_reg$alpha
fit_reg@model_name
fit_reg@model_pars
fit_reg@par_dims
fit_reg@mode
fit_reg@stanmodel
fit_reg@date
a = rstan::extract(fit_reg, pars = 'alpha')
dim(a)
a = rstan::extract(fit_reg, pars = 'alpha')$alpha
dim(a)
graphics.off()
hist(a)
mean(a)
get_posterior_mean(fit_reg)
get_posterior_mean(fit_reg)[,5]
parm=get_posterior_mean(fit_reg)[,5]
#save(parm, file = 'parameters_linear_reg.RData')
setwd("E:/teaching/BayesCog_UKE/BayesCog_Part1/04.regression_height")
setwd("E:/Dropbox/cp_prl")
library(R.matlab)
? R.matlab
data_kids = readMat('data/data_kids.mat')
data_kids
data_kids$ids.kids
data_kids$choice.kids
class(data_kids$choice.kids)
str(data_kids$choice.kids)
dim(data_kids$choice.kids)
data_kids$choice.kids[1,]
data_kids = readMat('data/data_kids.mat')
data_teens = readMat('data/data_teens.mat')
data_y_adults = readMat('data/data_y_adults.mat')
data_o_adults = readMat('data/data_o_adults.mat')
N_kids = dim(data_kids$choice.kids)[1]
N_kids
N_kids = dim(data_kids$choice.kids)[1]
N_teens = dim(data_teens$choice.teens)[1]
N_y_adults = dim(data_y_adults$choice.y_adults)[1]
N_o_adults = dim(data_o_adults$choice.o_adults)[1]
N_kids
N_teens
N_y_adults
dim(data_y_adults$choice.y.adults)
N_y_adults = dim(data_y_adults$choice.y.adults)[1]
N_o_adults = dim(data_o_adults$choice.o_adults)[1]
data_o_adults$choice.o_adults
data_o_adults$choice.o.adults
N_o_adults = dim(data_o_adults$choice.o.adults)[1]
T = 160
dataList = list(N = N_kids, T = T,
choice = data_kids$choice.kids, outcome = data_kids$outcome.kids)
dataList
dataList$N
dataList$T
dataList$choice
dataList$outcome
?save
rm(list=ls(all=TRUE))
library(R.matlab)
data_kids = readMat('data/data_kids.mat')
data_teens = readMat('data/data_teens.mat')
data_y_adults = readMat('data/data_y_adults.mat')
data_o_adults = readMat('data/data_o_adults.mat')
N_kids = dim(data_kids$choice.kids)[1]
N_teens = dim(data_teens$choice.teens)[1]
N_y_adults = dim(data_y_adults$choice.y.adults)[1]
N_o_adults = dim(data_o_adults$choice.o.adults)[1]
T = 160
dataList = list(N = N_kids, T = T,
choice = data_kids$choice.kids,
outcome = data_kids$outcome.kids)
dataList
save(dataList, file = 'data/datalist_kids.RData')
rm(dataList)
dataList = list(N = N_teens, T = T,
choice = data_teens$choice.teens,
outcome = data_teens$outcome.teens)
dataList
save(dataList, file = 'data/datalist_teens.RData')
rm(dataList)
dataList = list(N = N_y_adults, T = T,
choice = data_y_adults$choice.y.adults,
outcome = data_y_adults$outcome.y.adults)
dataList
save(dataList, file = 'data/datalist_y_adults.RData')
rm(dataList)
dataList = list(N = N_o_adults, T = T,
choice = data_o_adults$choice.o.adults,
outcome = data_o_adults$outcome.o.adults)
dataList
save(dataList, file = 'data/datalist_o_adults.RData')
rm(dataList)
rstan:::rstudio_stanc("scripts/stan/prl_rw_indec_ppc.stan")
rstan:::rstudio_stanc("scripts/stan/prl_rw_indec_ppc.stan")
16-6
library(rstan)
?gqs
