endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
rm(list=ls(all=TRUE))
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList
dataList
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v3.stan")
cat("Estimating", modelFile, "model... \n")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model_v3.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_globe)
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v3.stan")
rstan:::rstudio_stanc("_scripts/binomial_globe_model_v3.stan")
rm(list=ls(all=TRUE))
w <- c(6,7)
N <- 9
dataList <- list(w=w, N=N)
# =============================================================================
#### Running Stan ####
# =============================================================================
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/binomial_globe_model_v3.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
2019 - 1988 + 1
p_start <- 0
p_end   <- 1
n_grid  <- 20
w <- 6
N <- 9
p_grid <- seq( from = p_start , to = p_end , length.out = n_grid)
p_grid
length(p_grid)
p_grid
plot(p_grid)
prior <- rep(1 , n_grid)
prior
? dbinom
p_grid
likelihood <- dbinom(w , size = N , prob = p_grid )
plot(likelihood)
plot(likelihood, style='b')
plot(likelihood, type = ='b')
plot(likelihood, type = 'b')
plot(likelihood, type = 'b')
prior
unstd.posterior <- likelihood * prior
plot(unstd.posterior, type = 'b')
posterior <- unstd.posterior / sum(unstd.posterior)
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(p_grid=p_grid, posterior=posterior)
g <- ggplot(df, aes(p_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
graphics.off()
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_grid.R')
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_grid.R')
rm(list = ls())
graphics.off()
source('E:/teaching/BayesCog_Wien/02.binomial_globe/_scripts/binomial_globe_grid.R')
(17-4+1) * 5
3803 / 160
4214 / 160
R.version
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList
w
N
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
parallel::detectCores()
parallel::detectCores()
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
modelFile <- '_scripts/my_first_stan_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
class(fit_globe)
print(fit_globe)
stan_trace(fit_globe, pars = 'theta', inc_warmup = F)
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_trace_excl_warm_up <- stan_trace(fit_globe, pars = 'theta', inc_warmup = F)
plot_trace_incl_warm_up <- stan_trace(fit_globe, pars = 'theta', inc_warmup = T)
ggsave(plot = plot_trace_excl_warm_up, "_plots/trace_excl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_trace_incl_warm_up, "_plots/trace_incl_warmup.png", width = 6, height = 4, type = "cairo-png", units = "in")
plot_dens_cmb <- stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
plot_dens_sep <- stan_dens(fit_globe, separate_chains = T)
ggsave(plot = plot_dens_cmb, "_plots/dens_cmb.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_sep, "_plots/dens_sep.png", width = 6, height = 4, type = "cairo-png", units = "in")
# =============================================================================
#### Info ####
# =============================================================================
# binom
theta_start <- 0
theta_end   <- 1
n_grid  <- 20
w <- 6
N <- 9
theta_grid <- seq( from = theta_start , to = theta_end , length.out = n_grid )
theta_grid
prior <- rep(1 , n_grid)
plot(prior)
plot(1:21,prior)
prior
plot(1:20,prior)
length(prior)
graphics.off()
plot(prior)
likelihood <- dbinom(w , size = N , prob = theta_grid )
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = theta_grid )
likelihood <- dbinom(w , size = N , prob = theta_grid )
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(theta_grid=theta_grid, posterior=posterior)
str(df)
g <- ggplot(df, aes(theta_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(theta_grid=theta_grid, posterior=posterior)
g <- ggplot(df, aes(theta_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
graphics.off()
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(theta_grid=theta_grid, posterior=posterior)
g <- ggplot(df, aes(theta_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
plot(posterior)
plot(unstd.posterior)
plot(posterior, type='l')
plot(unstd.posterior, type='l')
w <- 6
N <- 9
dataList <- list(w=w, N=N)
x = 2
y = c(4,5)
list(x=x,y=y)
w <- 6
N <- 9
dataList <- list(w=w, N=N)
rstan::lookup(dbinom)
help(binomial)
rstan::lookup(dbinom)
rstan::lookup(dbinom)
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_model.stan")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
parallel::detectCores()
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
modelFile <- '_scripts/my_first_stan_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
? stan
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
fit_globe2 <- stan(modelFile,
fit = fit_globe,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
class(fit_globe)
print(fit_globe)
theta_start <- 0
theta_end   <- 1
n_grid  <- 20
theta_grid <- seq( from = theta_start , to = theta_end , length.out = n_grid )
theta_grid
DIFF(theta_grid)
diff(theta_grid)
class(theta_grid)
theta_start <- 0
theta_end   <- 1
n_grid  <- 20
w <- 6
N <- 9
# define grid
theta_grid <- seq( from = theta_start , to = theta_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = theta_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
# =============================================================================
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(theta_grid=theta_grid, posterior=posterior)
g <- ggplot(df, aes(theta_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
theta_end   <- 1
n_grid  <- 100
w <- 6
N <- 9
# define grid
theta_grid <- seq( from = theta_start , to = theta_end , length.out = n_grid )
# define prior
prior <- rep(1 , n_grid)
# compute likelihood at each value in grid
likelihood <- dbinom(w , size = N , prob = theta_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
# =============================================================================
#### Plot ####
# =============================================================================
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
df <- data.frame(theta_grid=theta_grid, posterior=posterior)
g <- ggplot(df, aes(theta_grid, posterior))
g <- g + geom_line(size = 2) + geom_point(size = 5, shape = 21, fill='white')
g <- g + myconfig + labs(x = 'probability of water',
y = 'posterior probability', title = paste0(as.character(n_grid),' points'))
print(g)
sum(posterior)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
class(myconfig)
class(g)
print(g)
rstan:::rstudio_stanc("_scripts/my_first_stan_data_story.stan")
rstan:::rstudio_stanc("_scripts/my_first_stan_data_story.stan")
w <- 6
N <- 9
dataList <- list(w=w, N=N)
dataList <- list(w=w, N=N)
w <- 6
N <- 9
dataList <- list(w=w, N=N)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
modelFile <- '_scripts/my_first_stan_data_story.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
modelFile
dataList
nChains
nIter
nWarmup
nThin
"random"
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
modelFile <- '_scripts/my_first_stan_data_story.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_globe <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
f = fit_globe
class(f)
str(f)
f$theta
f@model_name
f@model_pars
f@par_dims
f@mode
f@stanmodel
f@date
print(f)
stan_dens(fit_globe, separate_chains = F, fill = 'skyblue')
stan_dens(fit_globe, separate_chains = T)
stan_trace(fit_globe, pars = 'theta', inc_warmup = F)
stan_trace(fit_globe, pars = 'theta', inc_warmup = T)
plot(c(0,0,10,10),c(0,10,0,10), type = "n", axes = FALSE, ann = FALSE)
points(rnorm(100,5,2),rnorm(100,5,2), col = "yellow", pch = 20)
points(rnorm(100,5,2),rnorm(100,5,2), col = "lightblue", pch = 20)
points(rnorm(100,5,2),rnorm(100,5,2), col = "pink", pch = 20)
xb  = 2
yb1 = 6
yb2 = 4
xd.l1  = c(0,0,1,1.25,1.25,1.5,1.5,1.75,1.75,2,2.25,2.25,2.5,2.5,2.75,2.75,3.5,3.5,3.5,3.75,3.75,3.5,4.25,4,4,4.25,4.25,4.5,4.5,4,
5,5.25,5.25,5.5,5.5,5.25,5.25,5,5.5,5.5)
yd.l1  = c(1,0,0.5,0,0,0.5,0.5,0,0,0.5,0.5,0,1,0,1,0,1,0,0,0.25,0.25,0.5,0,0.25,0.25,0.5,0.5,0.25,0.25,0.25,
0.25,0,0,0.25,0.25,0.5,0.5,0.25,0.5,0)
x0 = xd.l1[seq(1,length(xd.l1),2)] + xb
x1 = xd.l1[seq(2,length(xd.l1),2)] + xb
y0 = yd.l1[seq(1,length(xd.l1),2)] + yb1
y1 = yd.l1[seq(2,length(xd.l1),2)] + yb1
segments(x0,y0,x1,y1, lwd = 4, col = "slateblue2")
xd.l2 = c(2,2,2,2.5,2.5,2.5,2.5,2,
2.5,3,3,3.5,2.5,3.5,
3.55,3.55,3.55,4.05,4.05,4.05,4.05,3.55,
4.5,4.5,4.75,4.75,5,5)
yd.l2 = c(1.5,0,0,0.5,0.5,1,1,1.5,
0,1.5,1.5,0,0.5,0.5,
1.5,0,0,0.5,0.5,1,1,1.5,
1.5,0.35,1.5,0.35,1.5,0.35)
x0 = xd.l2[seq(1,length(xd.l1),2)] + xb
x1 = xd.l2[seq(2,length(xd.l1),2)] + xb
y0 = yd.l2[seq(1,length(xd.l1),2)] + yb2
y1 = yd.l2[seq(2,length(xd.l1),2)] + yb2
segments(x0,y0,x1,y1, lwd=4, col = "slateblue2")
ix = c(4.5,4.75,5) + xb
iy = c(0,0,0) + yb2
points(ix,iy, pch = 20, col = "slateblue2")
ix
