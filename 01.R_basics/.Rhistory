cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
print('a')
cat('a')
tmp = print('a')
tmp
tmp2= cat('a')
tmp2
s= 1;cat('running analysis of s = ', s)
s= 1;print('running analysis of s = ', s)
s= 1;print(c('running analysis of s = ', s))
month_name <- format(ISOdate(2019,1:12,1),"%B")
month_name
for (j in 1:length(month_name) ) {
cat()
}
length(month_name)
1:length(month_name)
month_name[1]
month_name[2]
month_name[3]
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j] )
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j], '. \n' )
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j], '. \n' )
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j], '\n' )
}
my_mean <- function(x) {
x_bar <- sum(x, na.rm = T) / length(na.omit(x))
return(x_bar)
}
ls()
rm(list = ls())
ls()
my_mean <- function(x) {
x_bar <- sum(x, na.rm = T) / length(na.omit(x))
return(x_bar)
}
ls()
a = 1:20
a
a[3] = NA
a
mean(a)
mean(a,na.rm = T)
my_mean(a)
all.equal(mean(a,na.rm = T), my_mean(a))
mean(a)
my.mean.cauculaiton.2020.Jan <- function(x) {
x_bar <- sum(x, na.rm = T) / length(na.omit(x))
return(x_bar)
}
ls()
my.mean.cauculaiton.2020.Jan(a)
library(acepack)
detach("package:acepack", unload = TRUE)
library()
data_dir = ('_data/RL_raw_data/sub01/raw_data_sub01.txt')
data = read.table(data_dir, header = T, sep = ",")
class(data)
head(data)
head(data, 10)
tail(data)
tail(data, 10)
sum(complete.cases(data))
dim(data)
data = data[complete.cases(data),]
dim(data[complete.cases(data),])
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c()
class(rawdata)
file.path('a','b')
file.path('C:/','mydata')
file.path('C:','mydata')
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c()
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
dim(rawdata)
s = 1
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_file
s =2
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_file
s=1;sprintf('sub%02i/raw_data_sub%02i.txt',s,s)
s=2;sprintf('sub%02i/raw_data_sub%02i.txt',s,s)
s=3;sprintf('sub%02i/raw_data_sub%02i.txt',s,s)
s=3;sprintf('sub%i/raw_data_sub%02i.txt',s,s)
s=3;sprintf('sub%03i/raw_data_sub%02i.txt',s,s)
s=3;sprintf('sub_%s/raw_data_sub%02i.txt',s,s)
s=3;sprintf('sub_%s/raw_data_sub%02i.txt','UKE',s)
s=3;sprintf('sub_%i/raw_data_sub%02i.txt','UKE',s)
s=3;sprintf('sub_%f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%2.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%02.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%5.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%6.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%05.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%005.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%006.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%08.3f/raw_data_sub%02i.txt',2.2,s)
s=3;sprintf('sub_%08.3f/raw_data_sub%02i.txt',2.2,s)
dim(rawdata)
sum(complete.cases(rawdata))
rawdata = rawdata[complete.cases(rawdata),]
dim(rawdata)
str(rawdata)
rawdata$choice == rawdata$correct
(rawdata$choice == rawdata$correct) * 1.0
TRUE * 1.0
FALSE * 1.0
TRUE * 1
FALSE * 1
str(rawdata)
rawdata$accuracy = (rawdata$choice == rawdata$correct) * 1.0
str(rawdata)
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
aggregate(rawdata$accuracy, by = list(rawdata$subjID), sum()[,2]
aggregate(rawdata$accuracy, by = list(rawdata$subjID), sum)[,2]
aggregate(rawdata$accuracy, by = list(rawdata$subjID), length)[,2]
aa = aggregate(rawdata$accuracy, by = list(rawdata$subjID), sum)[,2]
ss = aggregate(rawdata$accuracy, by = list(rawdata$subjID), length)[,2]
acc = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
all.equal(aa/ss, acc)
(aa/ss == acc)
aggregate(rawdata$accuracy, by = list(rawdata$subjID, rawdata$trialID), mean)[,2]
? dnorm
x = -5:5
x
x
y  =dnorm(x)
#plot(x,y)
x = -5:5
y  =dnorm(x)
plot(x,y)
plot(x,y, type = 'l')
?seq
x=seq(-5,5,length.out = 500)
y  =dnorm(x)
plot(x,y, type = 'l')
x=seq(-5,5,length.out = 500)
x
y  =dnorm(x)
y  =dnorm(x)
plot(x,y, type = 'l')
x=seq(-5,5,length.out = 500)
y  =dnorm(x)
plot(x,y, type = 'l')
y1 =pnorm(x)
plot(x,y1, type = 'l')
x = rnorm(1000)
hist(x)
x = rnorm(1000, 5, 2)
hist(x)
runif(1)
runif(10)
rbind(c(1,2,3), c(4,5,6))
sum(1:6)
m = rbind(c(1,2,3), c(4,5,6))
sum(m)
R.version
sessionInfo()
getwd()
cat("Hello", "World")
a = cat("Hello", "World")
a
a = paste("Hello", "World")
a
a = paste0("Hello", "World")
a
paste0('C:/', 'Group1')
a1 <- 5
a2 <- as.integer(a1)
class(a1)
class(a2)
"UKE's party"
c1 <- T; c2 <- TRUE; c3 <- F; c4 <- FALSE
class(c1)
f <- factor(letters[c(1, 1, 2, 2, 3:10)])
class(f)
v1 <- 1:12
v2 <- c(2,4,1,5,1,6, 13:18)
v3 <- c(rep('aa',4), rep('bb',4), rep('cc',4))
class(v1)
class(v2)
class(v3)
m1 <- matrix(v1, nrow=3, ncol=4)
class(m1)
m1
V1
v1
v1
m1
m2 <- matrix(v1, nrow=3, ncol=4, byrow = T)
m2
v1
m1 <- matrix(v1, nrow=3, ncol=4)
m1
arr <- array(v1, dim=c(2,2,3))
arr
class(m1)
class(arr)
df <- data.frame(v1=v1, v2=v2, v3=v3, f=f)
df
class(fd)
class(df)
str(df)
str(df)
df
str(df)
head(df)
head(df,10)
tail(df)
tail(df,3)
tail(df,10)
class(v1)
class(v2)
1:1:12
1:.5:12
1:.5:12
seq(1,12,0.5)
seq(1,12,length=10)
seq(1,12,0.5)
seq(1,12,length=10)
seq(1,12,by=0.5)
seq(from = 1,to = 12,by=0.5)
seq(from = 1, to = 12,length=10)
?seq
? rep
rep(c(1,2), times=10)
rep(c(1,2), times=each)
rep(c(1,2), each = 5)
cbind( rep(c(1,2), each = 8), rep(c(1,2), each = 4, times=2))
t <- runif(1) # random number between 0 and 1
t
unif(1, 0, 2) # random number between 0 and 1
runif(1, 0, 2) # random number between 0 and 1
runif(10, 0, 2) # random number between 0 and 1
t
if (t <= 1/3) {
cat("t =",t , ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j], '\n' )
}
? format
format(ISOdate(2019,1:12,1),"%B")
format(ISOdate(2019,1:12,1),"%A")
format(ISOdate(2019,1:12,1),"%Y")
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j] )
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j], '\n' )
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is', month_name[j], '. \n' )
}
?cat
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat('This month is ', month_name[j], '. \n', sep='' )
}
rep(1, 50)
cbind( rep(c(1,2), each = 8), rep(c(1,2), each = 4, times=2))
rep(c(1,2), each= 8)
rep(c(1,2), each= 4, times=2)
rep(c(1,2), each = 2)
rep(c(1,2), times = 2)
cbind( rep(c(1,2), each = 8), rep(c(1,2), each = 4, times=2))
cbind( rep(c(1,2), each = 8), rep(c(1,2), each = 4, times=2), rep(c(5,6), each = 2, times=4))
ggplot2::aes
myplot::aes
aes
c(1,2,3,4)
a = c(1,2,3,4)
complete.cases(a)
a[2]= NA
a
complete.cases(a)
a[3] =NULL
a = NULL
a
complete.cases(a)
is.null(a)
rm(list=ls())
data_dir = ('_data/RL_raw_data/sub01/raw_data_sub01.txt')
data = read.table(data_dir, header = T, sep = ",")
head(data)
class(data)
str(data)
data$choice
is.na(data$choice)
sum(is.na(data$choice))
find(is.na(data$choice))
which(is.na(data$choice))
complete.cases(data)
sum(complete.cases(data))
data = data[complete.cases(data),]
dim(data)
data
sum(is.na(data$choice))
complete.cases(data)
data_dir = ('_data/RL_raw_data/sub01/raw_data_sub01.txt')
data = read.table(data_dir, header = T, sep = ",")
head(data)
complete.cases(data)
data[c(1,2,3,4,7), ]
data[c(T, F,T,T,F), ]
sum(complete.cases(data))
data = data[complete.cases(data),]
dim(data[complete.cases(data),])
data
5
a =5
(a =5)
a =5 ;
(a =5)
sprintf('sub%d', 1)
sprintf('sub%03d', 1)
sprintf('sub%03f', 1)
sprintf('sub%03f', .5)
sprintf('sub%0.2f', .5)
sprintf('sub%0.3f', .5)
sprintf('sub%00.3f', .5)
sprintf('sub%a.3f', .5)
sprintf('sub%1.3f', .5)
sprintf('sub%00.3f', .5)
sprintf('sub%.3f', .5)
sprintf('sub%0.3f', .5)
sprintf('sub_%s', 'subdata')
s = 1; sprintf("sub_%d", s)
s = 2; sprintf("sub_%d", s)
s = 2; sprintf("sub_%d", s)
s = 2; sprintf("sub_%f", s)
sprintf('path_%s', 'UKE' )
s = 1; sprintf("sub_%d", s)
s = 11; sprintf("sub_%d", s)
s = 1; sprintf("sub_%02d", s)
s = 1; sprintf("sub_%04d", s)
s = 2; sprintf("sub_%f", s)
s = 2; sprintf("sub_%0.2f", s)
ns = 10
data_dir = '_data/RL_raw_data'
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c()
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
rawdata = rawdata[complete.cases(rawdata),]
m = 'data {
int<lower=0> J;         // number of schools
real y[J];              // estimated treatment effects
real<lower=0> sigma[J]; // standard error of effect estimates
}
parameters {
real mu;                // population treatment effect
real<lower=0> tau;      // standard deviation in treatment effects
vector[J] eta;          // unscaled deviation from mu by school
}
transformed parameters {
vector[J] theta = mu + tau * eta;        // school treatment effects
}
model {
target += normal_lpdf(eta | 0, 1);       // prior log-density
target += normal_lpdf(y | theta, sigma); // log-likelihood
}'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(m, data = schools_dat)
library(rstan)
fit <- stan(m, data = schools_dat)
?stan
fit <- stan(model_code = m, data = schools_dat)
setwd('E:')
getwd()
setwd('E:/')
dir()
source('test_rstan.R')
Sys.getenv("HOME")
devtools::install_version("withr", version="2.2.0")
source('test_rstan.R')
source('test_rstan.R')
